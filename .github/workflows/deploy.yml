name: Deploy all

on:
    # note: workflow_displatch will only work on master branch
    workflow_dispatch:

    # Only run workflow on push to master (via a PR being approved)
    # push:
    #   branches:
    #     - master
    #   paths:
    #   # run if anything changed in client, toplevel, or deploy-related folders
    #   - 'deploy/**'
    #   - 'client/**'
    #   - 'community/**'
    #   - 'server/**'
    #   - '*'

jobs:
    build:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                node-version: [16]

        steps:
            - uses: actions/checkout@v3
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node-version }}
            - name: Setup SSH
              run: |
                  mkdir -p ~/.ssh
                  echo "$SSH_KEY" > ~/.ssh/ec2.key
                  chmod 600 ~/.ssh/ec2.key
                  cat >> ~/.ssh/config <<END
                    Host edrop_v3_ec2
                    HostName $SSH_HOST
                    User $SSH_USER
                    IdentityFile ~/.ssh/ec2.key
                    StrictHostKeyChecking no
                  END
            - name: Client deploy to EC2
              run: |
                  cd client
                  npm ci
                  npm run build

                  ssh edrop_v3_ec2 'cd ~/eDrops3/client && rm -r dist && mkdir dist'
                  scp -i ~/.ssh/ec2.key -o StrictHostKeyChecking=no -r dist/* $SSH_USER@$SSH_HOST:~/eDrops3/client/dist
            - name: Community deploy to EC2
              run: |
                  cd community
                  npm ci
                  npm run build

                  ssh edrop_v3_ec2 'cd ~/eDrops3/community && rm -r dist && mkdir dist'
                  scp -i ~/.ssh/ec2.key -o StrictHostKeyChecking=no -r dist/* $SSH_USER@$SSH_HOST:~/eDrops3/community/dist
            - name: Backend deploy to EC2
              run: |
                  cd server
                  docker build -t edrop_backend .
                  docker save -o edrop_backend.tar edrop_backend

                  scp -i ~/.ssh/ec2.key -o StrictHostKeyChecking=no edrop_backend.tar $SSH_USER@$SSH_HOST:~/eDrops3/edrop_backend.tar
                  cd ..
                  scp -i ~/.ssh/ec2.key -o StrictHostKeyChecking=no Caddyfile *.yml LICENSE README.md CODEOWNERS $SSH_USER@$SSH_HOST:~/eDrops3/
            - name: Restart Caddy to pickup new files
              run: |
                  echo 'Restarting Caddy to pick up new files'
                  ssh edrop_v3_ec2 'cd ~/eDrops3/ && ls client/dist/ && docker restart edrop_caddy'
              env:
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
                  SSH_USER: ${{ secrets.SSH_USER }}
                  SSH_HOST: ${{ secrets.SSH_HOST }}
                  SSH_KEY: ${{ secrets.SSH_KEY }}
