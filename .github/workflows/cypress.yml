name: End-to-end tests
on:
    push:
        # Triggers on push to stage or master
        branches: [stage, master]
    workflow_dispatch:
env:
    APP_MYSQL_HOST: edroplets_db
jobs:
    cypress-run:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                node-version: [18]

        steps:
            - name: Checkout
              uses: actions/checkout@v3
            # Install NPM dependencies, cache them correctly
            # and run all Cypress tests
            - name: Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node-version }}
            - name: Install Docker Compose
              run: |
                sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
                docker-compose --version
            - name: Start backend
              run: |
                  # install server
                  cd server
                  npm install
                  npm install -g wait-on
                  docker build -t edroplets_backend .

                  # initialize server
                  cd .. 
                  touch deploy/test/backend_pwds.env
                  MIGRATE_DATABASE=Yes RESET_DATABASE=Yes docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d

                  echo "Waiting for database to start"
                  wait-on tcp:3306 --timeout 25000
                  echo "Database has started"

                  # Wait for database to be reset
                  set +e
                  retries=5
                  docker-compose -f docker-compose.yml -f docker-compose.test.yml logs
                  docker-compose -f docker-compose.yml -f docker-compose.test.yml logs | grep 'Container edroplets_db  Healthy'
                  while [[ $? -ne 0 && $retries -ne 0 ]]; do
                    echo "Waiting for database reset to occur, will try again in 5 seconds"
                    echo "$retries retries left"
                    sleep 5
                    retries=$(( $retries - 1 ))
                    docker-compose -f docker-compose.yml -f docker-compose.test.yml logs
                    docker-compose -f docker-compose.yml -f docker-compose.test.yml logs | grep 'Container edroplets_db  Healthy'
                  done

                  if [[ $retries -eq 0 ]]; then
                    echo "Test failure: failed to reset database"
                    exit 1
                  else
                    echo "Database has been reset"
                  fi

                  set -e

                  # Restart backend without resetting database
                  docker-compose -f docker-compose.yml -f docker-compose.test.yml down
                  docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d

                  echo "Waiting for backend to start"
                  wait-on http-get://localhost:3000/explorer --timeout 25000
                  echo "Backend has started"

                  docker-compose -f docker-compose.yml -f docker-compose.test.yml logs

                  docker logs edroplets_backend
              env:
                  APP_EMAIL_API_KEY: ${{ secrets.APP_EMAIL_API_KEY }}
                  SHOPIFY_TOKEN: ${{ secrets.SHOPIFY_TOKEN }}
            - name: Frontend Cypress E2E tests
              uses: cypress-io/github-action@v4
              with:
                browser: chrome
                start: npm run dev
                wait-on: http://localhost:8086
                working-directory: ./client
            - name: Stop backend
              run: |
                  # Shut down the testing backend
                  docker-compose -f docker-compose.yml -f docker-compose.test.yml down
                  exit $EXIT
              
