'use strict';

module.exports = function(OrderInfo) {
    //Remote Methods
    // Create new OrderInfo by shopify web hook

    //Without the "next" parameter
    OrderInfo.newOrderInfoCreated = async (body) => {
    // Query the database to find whether the OrderInfo exists
    const OrderInfoId = body.id;
    try {
        let OrderInfoInstance = await OrderInfo.findById(OrderInfoId);
        if (!OrderInfoInstance) {
            //console.log(body.line_items[0].properties);
            console.log(body);
            let data = {};
            data.orderInfoId = OrderInfoId;
            // data.email = body.email;
            // data.createdAt = body.created_at;
            // data.process = body.line_items[0].properties[0].value;
            // data.coverPlate = body.line_items[0].properties[1].value === "true" ? "Yes" : "No";;
            // data.fileName = body.line_items[0].properties[2].value;
            // data.orderStatusURL = body.order_status_url;
            // data.orderAddress = body.customer.default_address;
            // data.sampleQuantity = body.line_items[0].quantity;

            let Customer = OrderInfo.app.models.customer;
            let customerInstance = await Customer.findOne({where: {email: body.email}});
            data.customerId = customerInstance.id;
            await OrderInfo.create(data);
        } else {
            console.log('OrderInfo already exists!');
        }
    }
    catch(err) {
        console.log(err);
    }

    /* Old version using callback
    OrderInfo.findOne({where: {OrderInfoId: OrderInfoId}}, (err, OrderInfoInstance) => {
        if (err) {
                console.log(err);
            } 
            else if (!OrderInfoInstance) {
                let data = {};
                data.OrderInfoId = OrderInfoId;
                data.email = body.email;
                data.createdAt = body.created_at;
                OrderInfo.app.models.customer.findOne({where: {email: body.email}}, (err, customerInstance) => {
                    if (err) {
                        console.log(err);
                    } else {
                        console.log(customerInstance);
                        data.customerId = customerInstance.id;
                        OrderInfo.create(data, (err, createdOrderInfo) => {
                            if (err) {
                                console.log(err);
                            } else {
                                console.log("created successfully");
                            }
                        });
                    }
                })
            } else {
                console.log("already existed");
            }
        })
    */
   
    }


    // This function:
    // (1) Updates the specified order with given ID (represents customer's cart)
    // (2) Searches if the appropriate item is already in the customer's cart
    //      If so, update quantity; if not, create item (orderChip or orderProduct) 
    //      and then add to cart
    // (3) Returns success/failure
    OrderInfo.addItemToCart = (body) => {
        console.log(body);

    }

    OrderInfo.remoteMethod('addItemToCart', {
        description: 'CUSTOM METHOD: Add or update item in cart',
        accepts: [
            {arg: 'body', type: 'object', http: {source: 'body'}}
        ],
        http: {path: '/addItemToCart', verb: 'post'},
        returns: {arg: 'msg', type: 'string'}
    });

    OrderInfo.remoteMethod('newOrderInfoCreated', {
        description: 'An OrderInfo was created by Shopfify',
        accepts: [
            {arg: 'body', type: 'object', http: {source: 'body'}}
        ],
        http: {path: '/newOrderInfoCreated', verb: 'post'},
        returns: {arg: 'msg', type: 'string'}
    });

    /*  OrderInfo assignment
    *   para: OrderInfoKey: the primary key generated by loopback instead of the OrderInfoId from shopify
    *         workerId: the id property of worker instance
    *         next: uncertain
    */
    OrderInfo.assignOrderInfo = async (orderId, workerId, next) => {
        const workerModel = OrderInfo.app.models.foundryWorker;
        let data = {};
        data.workerId = workerId;
        try {
            const workerInstance = await workerModel.findById(workerId);
            data.workerName = workerInstance.username;
            data.status = 'Assigned to Foundry';

            let OrderInfoInstance = await OrderInfo.findById(orderId);
            if (OrderInfoInstance) {
                var updatedOrderInfoData = await OrderInfoInstance.updateAttributes(data);
                //next();  When we add this ,it shows error like this: (node:2160) UnhandledPromiseRejectionWarning: Error: Callback was already called.
            } else {
                throw Error('OrderInfo not exist!');
            }
        }
        catch(err) {
            console.log(err);
        }
        
        return updatedOrderInfoData;
    }

    OrderInfo.remoteMethod('assignOrderInfo', {
        description: 'Admin assignOrderInfo to foundry worker.',
        accepts: [
            {arg: 'orderId', type: 'number', http: {source: 'form'}},
            {arg: 'workerId', type: 'number', http: {source: 'form'}}
        ],
        returns: {arg: 'updatedOrderInfoData', type: 'object'},
        http: {path: '/assign-order-info', verb: 'post'}
    });

    /* OrderInfo status editing
    *  para: OrderInfoId: id property of OrderInfo instance which is passed from client side
    *        status: the status data from the frontend
    */ 
    OrderInfo.editStatus = async (orderId, status) => {
        try {
            let OrderInfoInstance = await OrderInfo.findById(orderId);
            if (!OrderInfoInstance) {
                throw new Error('OrderInfo does not exist!');
            } else {
                let updatedOrderInfoInstance = await OrderInfoInstance.updateAttribute('status', status);
                return updatedOrderInfoInstance;
            }
        }
        catch(err) {
            console.log(err);
        }
    }

    OrderInfo.remoteMethod('editStatus', {
        description: 'Worker is able to edit status in using the feature.',
        accepts: [
            {arg: 'orderId', type: 'number', http: {source: 'form'}},
            {arg: 'status', type: 'string', http: {source: 'form'}}
        ],
        returns: {arg: 'updatedOrderInfoInstance', type: 'object', root: true},
        http: {path: '/edit-order-status', verb: 'post', status: 200}
    })
};
